{
	"info": {
		"_postman_id": "anb-api-collection",
		"name": "ANB Rising Stars Showcase API",
		"description": "Collection para probar la API de la plataforma ANB Rising Stars Showcase",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('first_name');",
									"    pm.expect(jsonData).to.have.property('is_active');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"email\": \"testuser@example.com\",\n  \"password1\": \"testpassword123\",\n  \"password2\": \"testpassword123\",\n  \"city\": \"Bogotá\",\n  \"country\": \"Colombia\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('token_type');",
									"    pm.expect(jsonData.token_type).to.eql('Bearer');",
									"    ",
									"    // Store token for subsequent requests",
									"    pm.environment.set('access_token', jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.include('Email o contraseña incorrectos');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				}
			]
		},
		{
			"name": "Videos",
			"item": [
				{
					"name": "Get My Videos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/videos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"videos"
							]
						}
					}
				},
				{
					"name": "Upload Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has task_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('task_id');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Test Video Upload",
									"type": "text"
								},
								{
									"key": "video_file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/videos/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"videos",
								"upload"
							]
						}
					}
				},
				{
					"name": "Get Video Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has video data\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('video_id');",
									"        pm.expect(jsonData).to.have.property('title');",
									"        pm.expect(jsonData).to.have.property('status');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/videos/{{video_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"videos",
								"{{video_id}}"
							]
						}
					}
				},
				{
					"name": "Delete Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has confirmation message\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('message');",
									"        pm.expect(jsonData).to.have.property('video_id');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/videos/{{video_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"videos",
								"{{video_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Public",
			"item": [
				{
					"name": "Get Public Videos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (pm.response.json().length > 0) {",
									"    pm.test(\"Videos have required fields\", function () {",
									"        var videos = pm.response.json();",
									"        var firstVideo = videos[0];",
									"        pm.expect(firstVideo).to.have.property('video_id');",
									"        pm.expect(firstVideo).to.have.property('title');",
									"        pm.expect(firstVideo).to.have.property('username');",
									"        pm.expect(firstVideo).to.have.property('votes');",
									"        ",
									"        // Store video_id for voting test",
									"        pm.environment.set('public_video_id', firstVideo.video_id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/public/videos?limit=10&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"public",
								"videos"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					}
				},
				{
					"name": "Vote for Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 400 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Vote success message\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.include('Voto registrado exitosamente');",
									"    });",
									"} else if (pm.response.code === 400) {",
									"    pm.test(\"Already voted message\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.detail).to.include('Ya has votado');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/public/videos/{{public_video_id}}/vote",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"public",
								"videos",
								"{{public_video_id}}",
								"vote"
							]
						}
					}
				},
				{
					"name": "Get Rankings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (pm.response.json().length > 0) {",
									"    pm.test(\"Rankings have required fields\", function () {",
									"        var rankings = pm.response.json();",
									"        var firstRank = rankings[0];",
									"        pm.expect(firstRank).to.have.property('position');",
									"        pm.expect(firstRank).to.have.property('username');",
									"        pm.expect(firstRank).to.have.property('city');",
									"        pm.expect(firstRank).to.have.property('votes');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/public/rankings?limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"public",
								"rankings"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get Rankings by City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/public/rankings?city=Bogotá&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"public",
								"rankings"
							],
							"query": [
								{
									"key": "city",
									"value": "Bogotá"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Health status is healthy\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status).to.eql('healthy');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				}
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}